extern GtkWidget* gtk_widget_new(GType type, const gchar *first_property_name, ...);
extern void gtk_widget_destroy(GtkWidget *widget);
extern gboolean gtk_widget_in_destruction(GtkWidget *widget);
extern void gtk_widget_destroyed(GtkWidget *widget, GtkWidget **widget_pointer);
extern void gtk_widget_unparent(GtkWidget *widget);
extern void gtk_widget_show(GtkWidget *widget);
extern void gtk_widget_show_now(GtkWidget *widget);
extern void gtk_widget_hide(GtkWidget *widget);
extern void gtk_widget_show_all(GtkWidget *widget);
extern void gtk_widget_map(GtkWidget *widget);
extern void gtk_widget_unmap(GtkWidget *widget);
extern void gtk_widget_realize(GtkWidget *widget);
extern void gtk_widget_unrealize(GtkWidget *widget);
extern void gtk_widget_draw(GtkWidget *widget, cairo_t *cr);
extern void gtk_widget_queue_draw(GtkWidget *widget);
extern void gtk_widget_queue_resize(GtkWidget *widget);
extern void gtk_widget_queue_resize_no_redraw(GtkWidget *widget);
extern void gtk_widget_queue_allocate(GtkWidget *widget);
extern GdkFrameClock* gtk_widget_get_frame_clock(GtkWidget *widget);
extern gint gtk_widget_get_scale_factor(GtkWidget *widget);
extern gboolean (*GtkTickCallback)(GtkWidget *widget, GdkFrameClock *frame_clock, gpointer user_data);
extern guint gtk_widget_add_tick_callback(GtkWidget *widget, GtkTickCallback callback, gpointer user_data, GDestroyNotify notify);
extern void gtk_widget_remove_tick_callback(GtkWidget *widget, guint id);
extern void gtk_widget_size_allocate(GtkWidget *widget, GtkAllocation *allocation);
extern void gtk_widget_size_allocate_with_baseline (GtkWidget *widget, GtkAllocation *allocation, gint baseline);
extern void gtk_widget_add_accelerator(GtkWidget *widget, const gchar *accel_signal, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags);
extern gboolean gtk_widget_remove_accelerator(GtkWidget *widget, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods);
extern void gtk_widget_set_accel_path(GtkWidget *widget, const gchar *accel_path, GtkAccelGroup *accel_group);
extern GList* gtk_widget_list_accel_closures(GtkWidget *widget);
extern gboolean gtk_widget_can_activate_accel(GtkWidget *widget, guint signal_id);
extern gboolean gtk_widget_event(GtkWidget *widget, GdkEvent *event);
extern gboolean gtk_widget_activate(GtkWidget *widget);
extern void gtk_widget_reparent(GtkWidget *widget, GtkWidget *new_parent);
extern gboolean gtk_widget_intersect(GtkWidget *widget, const GdkRectangle *area, GdkRectangle *intersection);
extern gboolean gtk_widget_is_focus(GtkWidget *widget);
extern void gtk_widget_grab_focus(GtkWidget *widget);
extern void gtk_widget_grab_default(GtkWidget *widget);
extern void gtk_widget_set_name(GtkWidget *widget, const gchar *name);
extern const gchar* gtk_widget_get_name(GtkWidget *widget);
extern void gtk_widget_set_sensitive(GtkWidget *widget, gboolean sensitive);
extern void gtk_widget_set_parent(GtkWidget *widget, GtkWidget *parent);
extern void gtk_widget_set_parent_window(GtkWidget *widget, GdkWindow *parent_window);
extern GdkWindow* gtk_widget_get_parent_window(GtkWidget *widget);
extern void gtk_widget_set_events(GtkWidget *widget, gint events);
extern gint gtk_widget_get_events(GtkWidget *widget);
extern void gtk_widget_add_events(GtkWidget *widget, gint events);
extern void gtk_widget_set_device_events (GtkWidget *widget, GdkDevice *device, GdkEventMask events);
extern GdkEventMask gtk_widget_get_device_events(GtkWidget *widget, GdkDevice *device);
extern void gtk_widget_add_device_events(GtkWidget *widget, GdkDevice *device, GdkEventMask events);
extern void gtk_widget_set_device_enabled (GtkWidget *widget, GdkDevice *device, gboolean enabled);
extern gboolean gtk_widget_get_device_enabled(GtkWidget *widget, GdkDevice *device);
extern GtkWidget* gtk_widget_get_toplevel(GtkWidget *widget);
extern GtkWidget* gtk_widget_get_ancestor(GtkWidget *widget, GType widget_type);
extern GdkVisual* gtk_widget_get_visual(GtkWidget *widget);
extern void gtk_widget_set_visual(GtkWidget *widget, GdkVisual *visual);
extern gboolean gtk_widget_is_ancestor(GtkWidget *widget, GtkWidget *ancestor);
extern gboolean gtk_widget_translate_coordinates(GtkWidget *src_widget, GtkWidget *dest_widget, gint src_x, gint src_y, gint *dest_x, gint *dest_y);
extern gboolean gtk_widget_hide_on_delete(GtkWidget *widget);
extern void gtk_widget_set_direction(GtkWidget *widget, GtkTextDirection dir);
extern GtkTextDirection gtk_widget_get_direction(GtkWidget *widget);
extern void gtk_widget_set_default_direction(GtkTextDirection dir);
extern GtkTextDirection gtk_widget_get_default_direction(void);
extern void gtk_widget_shape_combine_region(GtkWidget *widget, cairo_region_t *region);
extern void gtk_widget_input_shape_combine_region(GtkWidget *widget, cairo_region_t *region);
extern PangoContext* gtk_widget_create_pango_context(GtkWidget *widget);
extern PangoContext* gtk_widget_get_pango_context(GtkWidget *widget);
extern void gtk_widget_set_font_options(GtkWidget *widget, const cairo_font_options_t *options);
extern const cairo_font_options_t* gtk_widget_get_font_options(GtkWidget *widget);
extern void gtk_widget_set_font_map(GtkWidget *widget, PangoFontMap *font_map);
extern PangoFontMap* gtk_widget_get_font_map(GtkWidget *widget);
extern PangoLayout* gtk_widget_create_pango_layout(GtkWidget *widget, const gchar *text);
extern void gtk_widget_queue_draw_area(GtkWidget *widget, gint x, gint y, gint width, gint height);
extern void gtk_widget_queue_draw_region(GtkWidget *widget, const cairo_region_t *region);
extern void gtk_widget_set_app_paintable(GtkWidget *widget, gboolean app_paintable);
extern void gtk_widget_set_redraw_on_allocate(GtkWidget *widget, gboolean redraw_on_allocate);
extern gboolean gtk_widget_mnemonic_activate(GtkWidget *widget, gboolean group_cycling);
extern void gtk_widget_class_install_style_property(GtkWidgetClass *klass, GParamSpec *pspec);
extern void gtk_widget_class_install_style_property_parser(GtkWidgetClass *klass, GParamSpec *pspec, GtkRcPropertyParser parser);
extern GParamSpec* gtk_widget_class_find_style_property(GtkWidgetClass *klass, const gchar *property_name);
extern GParamSpec** gtk_widget_class_list_style_properties(GtkWidgetClass *klass, guint *n_properties);
extern gboolean gtk_widget_send_focus_change(GtkWidget *widget, GdkEvent *event);
extern void gtk_widget_style_get (GtkWidget *widget, const gchar *first_property_name, ...);
extern void gtk_widget_style_get_property(GtkWidget *widget, const gchar *property_name, GValue *value);
extern void gtk_widget_style_get_valist(GtkWidget *widget, const gchar *first_property_name, va_list var_args);
extern void gtk_widget_class_set_accessible_type(GtkWidgetClass *widget_class, GType type);
extern void gtk_widget_class_set_accessible_role(GtkWidgetClass *widget_class, AtkRole role);
extern AtkObject * gtk_widget_get_accessible(GtkWidget *widget);
extern gboolean gtk_widget_child_focus(GtkWidget *widget, GtkDirectionType direction);
extern void gtk_widget_child_notify (GtkWidget *widget, const gchar *child_property);
extern void gtk_widget_freeze_child_notify(GtkWidget *widget);
extern gboolean gtk_widget_get_child_visible(GtkWidget *widget);
extern GtkWidget* gtk_widget_get_parent(GtkWidget *widget);
extern GtkSettings* gtk_widget_get_settings(GtkWidget *widget);
extern GtkClipboard * gtk_widget_get_clipboard(GtkWidget *widget, GdkAtom selection);
extern GdkDisplay* gtk_widget_get_display(GtkWidget *widget);
extern GdkScreen* gtk_widget_get_screen(GtkWidget *widget);
extern gboolean gtk_widget_has_screen(GtkWidget *widget);
extern void gtk_widget_get_size_request(GtkWidget *widget, gint *width, gint *height);
extern void gtk_widget_set_child_visible(GtkWidget *widget, gboolean is_visible);
extern void gtk_widget_set_size_request(GtkWidget *widget, gint width, gint height);
extern void gtk_widget_thaw_child_notify (GtkWidget *widget);
extern void gtk_widget_set_no_show_all (GtkWidget *widget, gboolean no_show_all);
extern gboolean gtk_widget_get_no_show_all(GtkWidget *widget);
extern GList * gtk_widget_list_mnemonic_labels(GtkWidget *widget);
extern void gtk_widget_add_mnemonic_label(GtkWidget *widget, GtkWidget *label);
extern void gtk_widget_remove_mnemonic_label(GtkWidget *widget, GtkWidget *label);
extern void gtk_widget_error_bell(GtkWidget *widget);
extern gboolean gtk_widget_keynav_failed(GtkWidget *widget, GtkDirectionType direction);
extern gchar * gtk_widget_get_tooltip_markup(GtkWidget *widget);
extern void gtk_widget_set_tooltip_markup(GtkWidget *widget, const gchar *markup);
extern gchar * gtk_widget_get_tooltip_text(GtkWidget *widget);
extern void gtk_widget_set_tooltip_text(GtkWidget *widget, const gchar *text);
extern GtkWindow* gtk_widget_get_tooltip_window(GtkWidget *widget);
extern void gtk_widget_set_tooltip_window(GtkWidget *widget, GtkWindow *custom_window);
extern gboolean gtk_widget_get_has_tooltip(GtkWidget *widget);
extern void gtk_widget_set_has_tooltip(GtkWidget *widget, gboolean has_tooltip);
extern void gtk_widget_trigger_tooltip_query(GtkWidget *widget);
extern GdkWindow* gtk_widget_get_window(GtkWidget *widget);
extern void gtk_widget_register_window(GtkWidget *widget, GdkWindow *window);
extern void gtk_widget_unregister_window(GtkWidget *widget, GdkWindow *window);
extern gboolean gtk_cairo_should_draw_window(cairo_t *cr, GdkWindow *window);
extern void gtk_cairo_transform_to_window(cairo_t *cr, GtkWidget *widget, GdkWindow *window);
extern int gtk_widget_get_allocated_width(GtkWidget *widget);
extern int gtk_widget_get_allocated_height(GtkWidget *widget);
extern void gtk_widget_get_allocation(GtkWidget *widget, GtkAllocation *allocation);
extern void gtk_widget_set_allocation(GtkWidget *widget, const GtkAllocation *allocation);
extern int gtk_widget_get_allocated_baseline(GtkWidget *widget);
extern void gtk_widget_get_allocated_size(GtkWidget *widget, GtkAllocation *allocation, int *baseline);
extern void gtk_widget_get_clip(GtkWidget *widget, GtkAllocation *clip);
extern void gtk_widget_set_clip(GtkWidget *widget, const GtkAllocation *clip);
extern gboolean gtk_widget_get_app_paintable(GtkWidget *widget);
extern gboolean gtk_widget_get_can_default(GtkWidget *widget);
extern void gtk_widget_set_can_default(GtkWidget *widget, gboolean can_default);
extern gboolean gtk_widget_get_can_focus(GtkWidget *widget);
extern void gtk_widget_set_can_focus(GtkWidget *widget, gboolean can_focus);
extern gboolean gtk_widget_get_focus_on_click(GtkWidget *widget);
extern void gtk_widget_set_focus_on_click(GtkWidget *widget, gboolean focus_on_click);
extern gboolean gtk_widget_get_has_window(GtkWidget *widget);
extern void gtk_widget_set_has_window(GtkWidget *widget, gboolean has_window);
extern gboolean gtk_widget_get_sensitive(GtkWidget *widget);
extern gboolean gtk_widget_get_sensitive(GtkWidget *widget);
extern gboolean gtk_widget_is_sensitive(GtkWidget *widget);
extern gboolean gtk_widget_get_visible(GtkWidget *widget);
extern gboolean gtk_widget_is_visible(GtkWidget *widget);
extern void gtk_widget_set_visible(GtkWidget *widget, gboolean visible);
extern void gtk_widget_set_state_flags(GtkWidget *widget, GtkStateFlags flags, gboolean clear);
extern void gtk_widget_unset_state_flags(GtkWidget *widget, GtkStateFlags flags);
extern GtkStateFlags gtk_widget_get_state_flags(GtkWidget *widget);
extern gboolean gtk_widget_has_default(GtkWidget *widget);
extern gboolean gtk_widget_has_focus(GtkWidget *widget);
extern gboolean gtk_widget_has_visible_focus (GtkWidget *widget);
extern gboolean gtk_widget_has_grab(GtkWidget *widget);
extern gboolean gtk_widget_is_drawable(GtkWidget *widget);
extern gboolean gtk_widget_is_toplevel(GtkWidget *widget);
extern void gtk_widget_set_window(GtkWidget *widget, GdkWindow *window);
extern void gtk_widget_set_receives_default(GtkWidget *widget, gboolean receives_default);
extern gboolean gtk_widget_get_receives_default(GtkWidget *widget);
extern void gtk_widget_set_support_multidevice(GtkWidget *widget, gboolean support_multidevice);
extern void gtk_widget_set_realized(GtkWidget *widget, gboolean realized);
extern gboolean gtk_widget_get_realized(GtkWidget *widget);
extern void gtk_widget_set_mapped(GtkWidget *widget, gboolean mapped);
extern gboolean gtk_widget_get_mapped(GtkWidget *widget);
extern gboolean gtk_widget_device_is_shadowed(GtkWidget *widget, GdkDevice *device);
extern GdkModifierType gtk_widget_get_modifier_mask(GtkWidget *widget, GdkModifierIntent intent);
extern void gtk_widget_insert_action_group (GtkWidget *widget, const gchar *name, GActionGroup *group);
extern double gtk_widget_get_opacity(GtkWidget *widget);
extern void gtk_widget_set_opacity(GtkWidget *widget, double opacity);
extern const gchar** gtk_widget_list_action_prefixes(GtkWidget *widget);
extern GActionGroup* gtk_widget_get_action_group(GtkWidget *widget, const gchar *prefix);
extern GtkWidgetPath* gtk_widget_get_path(GtkWidget *widget);
extern GtkStyleContext* gtk_widget_get_style_context(GtkWidget *widget);
extern void gtk_widget_reset_style(GtkWidget *widget);
extern const char* gtk_widget_class_get_css_name(GtkWidgetClass *widget_class);
extern void gtk_widget_class_set_css_name(GtkWidgetClass *widget_class, const char *name);
extern GtkRequisition* gtk_requisition_new(void);
extern GtkRequisition* gtk_requisition_copy(const GtkRequisition *requisition);
extern void gtk_requisition_free(GtkRequisition *requisition);
extern void gtk_widget_get_preferred_height(GtkWidget *widget, gint *minimum_height, gint *natural_height);
extern void gtk_widget_get_preferred_width(GtkWidget *widget, gint *minimum_width, gint *natural_width);
extern void gtk_widget_get_preferred_height_for_width(GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height);
extern void gtk_widget_get_preferred_width_for_height(GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width);
extern void gtk_widget_get_preferred_height_and_baseline_for_width(GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height, gint *minimum_baseline, gint *natural_baseline);
extern GtkSizeRequestMode gtk_widget_get_request_mode(GtkWidget *widget);
extern void gtk_widget_get_preferred_size(GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size);
extern gint gtk_distribute_natural_allocation(gint extra_space, guint n_requested_sizes, GtkRequestedSize *sizes);
extern GtkAlign gtk_widget_get_halign(GtkWidget *widget);
extern void gtk_widget_set_halign(GtkWidget *widget, GtkAlign align);
extern GtkAlign gtk_widget_get_valign(GtkWidget *widget);
extern GtkAlign gtk_widget_get_valign_with_baseline(GtkWidget *widget);
extern void gtk_widget_set_valign(GtkWidget *widget, GtkAlign align);
extern gint gtk_widget_get_margin_start(GtkWidget *widget);
extern void gtk_widget_set_margin_start(GtkWidget *widget, gint margin);
extern gint gtk_widget_get_margin_end(GtkWidget *widget);
extern void gtk_widget_set_margin_end(GtkWidget *widget, gint margin);
extern gint gtk_widget_get_margin_top(GtkWidget *widget);
extern void gtk_widget_set_margin_top(GtkWidget *widget, gint margin);
extern gint gtk_widget_get_margin_bottom(GtkWidget *widget);
extern void gtk_widget_set_margin_bottom(GtkWidget *widget, gint margin);
extern gboolean gtk_widget_get_hexpand(GtkWidget *widget);
extern void gtk_widget_set_hexpand(GtkWidget *widget, gboolean expand);
extern gboolean gtk_widget_get_hexpand_set(GtkWidget *widget);
extern void gtk_widget_set_hexpand_set(GtkWidget *widget, gboolean set);
extern gboolean gtk_widget_get_vexpand(GtkWidget *widget);
extern void gtk_widget_set_vexpand(GtkWidget *widget, gboolean expand);
extern gboolean gtk_widget_get_vexpand_set(GtkWidget *widget);
extern void gtk_widget_set_vexpand_set(GtkWidget *widget, gboolean set);
extern void gtk_widget_queue_compute_expand(GtkWidget *widget);
extern gboolean gtk_widget_compute_expand(GtkWidget *widget, GtkOrientation orientation);
extern void gtk_widget_init_template(GtkWidget *widget);
extern void gtk_widget_class_set_template(GtkWidgetClass *widget_class, GBytes *template_bytes);
extern void gtk_widget_class_set_template_from_resource (GtkWidgetClass *widget_class, const gchar *resource_name);
extern GObject* gtk_widget_get_template_child(GtkWidget *widget, GType widget_type, const gchar *name);